{"version":3,"sources":["services/base.js","components/spoilers/ListarSpoiler.js","services/ListarSpoilerService.js","components/spoilers/CriarSpoiler.js","services/CriarSpoilerService.js","components/spoilers/EditarSpoiler.js","services/EditarSpoilerService.js","components/spoilers/ConfirmarRemoverSpoiler.js","index.js","App.js"],"names":["api","ListarSpoiler","props","path","useState","spoilers","setSpoiler","erro","setErro","history","useHistory","useEffect","onSuccess","onFail","url","fetch","then","res","status","json","catch","getAll","dados","Alert","variant","exibeErro","length","map","item","indice","Card","key","className","Header","espoliador","Body","Title","titulo","Button","onClick","push","id","CriarSpoiler","descricao","spoiler","redirect","setRedirect","to","onSubmit","event","method","body","JSON","stringify","headers","data","ok","error","criarSpoiler","preventDefault","role","htmlFor","type","name","placeholder","minLength","maxLength","value","onChange","change","handleInputChange","aria-describedby","input","target","nArray","parse","EditarSpoiler","getOne","match","params","console","log","editSpoiler","disabled","ConfirmarRemoverSpoiler","handleClick","setState","state","this","title","Component","ReactDOM","render","Jumbotron","fluid","exact","component","document","getElementById"],"mappings":"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","file":"static/js/main.27b3c073.chunk.js","sourcesContent":["// const api = 'http://localhost:3000/api'; //local\r\nconst api = 'https://apinodespoilers.herokuapp.com/api';\r\n\r\nexport {api};","import React, { useState, useEffect } from \"react\";\r\nimport {Button, Card, Alert} from 'react-bootstrap'\r\nimport { getAll } from '../../services/ListarSpoilerService'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction ListarSpoiler (props){\r\n\r\n  const path = \"react-spoiler-app\"\r\n\r\n  const [spoilers, setSpoiler] = useState('')\r\n  const [erro, setErro] = useState(null)\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n\r\n    getAll(onSuccess, onFail);\r\n    \r\n    function onSuccess(spoilers){\r\n\r\n      spoilers.then(dados => { setSpoiler(dados)})\r\n    }\r\n\r\n    function onFail(erro){ setErro(erro) }\r\n\r\n    return () => {\r\n      // AbortController.abort();\r\n      // console.log(\"unmount\")\r\n    }\r\n\r\n  }, [])\r\n\r\n  function exibeErro() {\r\n\r\n    if (erro) {\r\n      return (\r\n        <Alert variant={\"danger\"}>\r\n          Erro de conexão com o servidor\r\n        </Alert>\r\n      );\r\n    }\r\n  }\r\n\r\n  function exibeSpoilers() {\r\n\r\n    if (spoilers && spoilers.length) {\r\n\r\n      return spoilers.map((item, indice) => (\r\n\r\n        <Card key={indice} className=\"mt-3 mb-3\">\r\n          <Card.Header>{item.espoliador}</Card.Header>\r\n          <Card.Body>\r\n           <Card.Title>\r\n              <h5 className=\"mt-0 mb-1\">{item.titulo}</h5>\r\n             \r\n           </Card.Title>\r\n\r\n           <Button variant=\"danger\" onClick={() => history.push(`${path}/remover/${item.id}`)} >\r\n              Remover\r\n           </Button>\r\n           <Button variant=\"primary\" onClick={() => history.push(`${path}/editar/${item.id}`)}>\r\n              Editar\r\n           </Button>\r\n          </Card.Body>\r\n        </Card>\r\n      ));\r\n    } \r\n    else {\r\n      return (\r\n        <Alert variant={\"light\"}>\r\n          Sem spoilers ainda. Faça spoilers não faça guerra :\r\n        </Alert>\r\n      );\r\n    }\r\n  }\r\n\r\n  return <div>{exibeErro() || exibeSpoilers()}</div>;\r\n}\r\n\r\nexport default ListarSpoiler;","import {api} from './base';\r\n\r\nexport function getAll(onSuccess, onFail){\r\n   \r\n    var url = `${api}/spoilers/getall`;\r\n\r\n    fetch(url)\r\n    .then(res => {\r\n\r\n        if (res.status===200)\r\n            onSuccess(res.json())\r\n    })\r\n    .catch(erro => {\r\n        onFail(erro)\r\n    })\r\n}","import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { criarSpoiler } from \"../../services/CriarSpoilerService\";\r\n\r\nfunction CriarSpoiler(props){\r\n\r\n  const [spoiler, setSpoiler] = \r\n    useState({\r\n      espoliador: \"\",\r\n      descricao: \"\",\r\n      titulo: \"\"\r\n    })\r\n  const [erro, setErro] = useState(null)\r\n  const [redirect, setRedirect] = useState(false)\r\n\r\n  function exibeErro() {\r\n\r\n    if (erro) {\r\n      return (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n          Erro de conexão com o servidor\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  if (redirect) {\r\n\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  else {\r\n\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        {exibeErro()}\r\n\r\n        <fieldset>\r\n          <legend>Criar Spoiler</legend>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"espoliador\">Espoliador</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"espoliador\"\r\n              name=\"espoliador\"\r\n              placeholder=\"zededeus\"\r\n              minLength=\"2\"\r\n              maxLength=\"40\"\r\n              value={spoiler.espoliador}\r\n              onChange={(change) => handleInputChange(change)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"titulo\">Título</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"titulo\"\r\n              name=\"titulo\"\r\n              aria-describedby=\"tituloAjuda\"\r\n              placeholder=\"Hereditário\"\r\n              minLength=\"2\"\r\n              maxLength=\"255\"\r\n              value={spoiler.titulo}\r\n              onChange={handleInputChange}\r\n            />\r\n            <small id=\"tituloAjuda\" className=\"form-text text-muted\">\r\n              Um título pode ser um filme, série, livro...\r\n            </small>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"descricao\">Descrição</label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              id=\"descricao\"\r\n              name=\"descricao\"\r\n              placeholder=\"Charlie é Paimon\"\r\n              minLength=\"2\"\r\n              maxLength=\"255\"\r\n              value={spoiler.descricao}\r\n              onChange={(change) => handleInputChange(change)}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Enviar\r\n          </button>\r\n        </fieldset>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  function handleInputChange(event){\r\n\r\n    const input = event.target;\r\n    const name = input.name;\r\n    const value = input.value;\r\n    var nArray = JSON.parse(JSON.stringify(spoiler));\r\n\r\n    nArray[name] = value\r\n\r\n    setSpoiler(nArray)\r\n  };\r\n\r\n  function handleSubmit(event){\r\n\r\n    criarSpoiler(spoiler, setRedirect, setErro);\r\n\r\n    event.preventDefault();\r\n  };\r\n}\r\n\r\nexport default CriarSpoiler;","import {api} from './base'\r\n\r\nexport function criarSpoiler(spoiler, setRedirect, setErro){\r\n\r\n    var url = `${api}/spoilers/create`;\r\n\r\n    fetch(url, {\r\n        method: \"post\",\r\n        body: JSON.stringify(spoiler),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n    .then(data => {\r\n\r\n        if (data.ok) \r\n            setRedirect(true);\r\n        \r\n        else {\r\n\r\n            data.json().then(data => {\r\n\r\n                if (data.error)\r\n                    setErro(data.error)\r\n            });\r\n        }\r\n    })\r\n    .catch(erro => setErro(erro));\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {Alert} from 'react-bootstrap'\r\nimport {getOne, editSpoiler} from '../../services/EditarSpoilerService'\r\n\r\n\r\nexport default function EditarSpoiler(props){\r\n\r\n  const [spoiler, setSpoiler] = useState({\r\n                                  espoliador: \"\",\r\n                                  descricao: \"\",\r\n                                  titulo: \"\"\r\n                                })\r\n  const [erro, setErro] = useState(null)\r\n  const [redirect, setRedirect] = useState(false)\r\n\r\n  useEffect(() => {\r\n\r\n    const {id} = props.match.params;\r\n    getOne(id, setSpoiler, setErro)\r\n\r\n    return () => {\r\n      console.log(\"willunmount edit\")\r\n    }\r\n  }, [props.match.params])\r\n\r\n  function exibeErro() {\r\n\r\n    if (erro) {\r\n      return (\r\n        <Alert variant={\"danger\"}>\r\n          Erro de conexão com o servidor\r\n        </Alert>\r\n      );\r\n    }\r\n  }\r\n\r\n  if (redirect) {\r\n    return <Redirect to=\"/\" />;\r\n  } \r\n  else {\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        {exibeErro()}\r\n\r\n        <fieldset>\r\n          <legend>Editar Spoiler</legend>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"espoliador\">Espoliador</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control-plaintext\"\r\n              id=\"espoliador\"\r\n              name=\"espoliador\"\r\n              placeholder=\"zededeus\"\r\n              minLength=\"2\"\r\n              maxLength=\"40\"\r\n              value={spoiler.espoliador}\r\n              onChange={(event) => handleInputChange(event)}\r\n              disabled\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"titulo\">Título</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"titulo\"\r\n              name=\"titulo\"\r\n              aria-describedby=\"tituloAjuda\"\r\n              placeholder=\"Hereditário\"\r\n              minLength=\"2\"\r\n              maxLength=\"255\"\r\n              value={spoiler.titulo}\r\n              onChange={(event) => handleInputChange(event)}\r\n            />\r\n            <small id=\"tituloAjuda\" className=\"form-text text-muted\">\r\n              Um título pode ser um filme, série, livro...\r\n            </small>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"descricao\">Descrição</label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              id=\"descricao\"\r\n              name=\"descricao\"\r\n              placeholder=\"Charlie é Paimon\"\r\n              minLength=\"2\"\r\n              maxLength=\"255\"\r\n              value={spoiler.descricao}\r\n              onChange={(event) => handleInputChange(event)}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Enviar\r\n          </button>\r\n        </fieldset>\r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\n  function handleInputChange(event){\r\n\r\n    const input = event.target;\r\n    const name = input.name;\r\n    const value = input.value;\r\n    var nArray = JSON.parse(JSON.stringify(spoiler));\r\n\r\n    nArray[name] = value\r\n\r\n    setSpoiler(nArray)\r\n  };\r\n\r\n  function handleSubmit(event){\r\n\r\n    editSpoiler(spoiler, setRedirect, setErro);\r\n\r\n    event.preventDefault();\r\n  };\r\n}\r\n","import {api} from './base';\r\n\r\nexport function getOne(id, onSuccess, onFail){\r\n   \r\n    var url = `${api}/spoilers/getone/${id}`\r\n    fetch(url)\r\n    .then(data => {\r\n\r\n        data.json().then(data => {\r\n\r\n            if (data.error)\r\n                onFail(data.erro)\r\n            \r\n            else\r\n                onSuccess(data)\r\n        });\r\n    })\r\n    .catch(erro => onFail(erro));\r\n\r\n}\r\n\r\n\r\nexport function editSpoiler(spoiler, onSuccess, onFail){\r\n   \r\n    const body = JSON.stringify(spoiler)\r\n    var url = `${api}/spoilers/put/${spoiler.id}`\r\n\r\n    fetch(url, {\r\n      method: \"put\",\r\n      body: body,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(data => {\r\n\r\n      if (data.ok)\r\n        onSuccess(true)\r\n\r\n      else {\r\n\r\n          data.json().then(data => {\r\n\r\n            if (data.error) \r\n                onFail(data.error)\r\n          });\r\n      }\r\n    })\r\n    .catch(erro => onFail(erro));\r\n\r\n}","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass ConfirmarRemoverSpoiler extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            spoiler: {},\r\n            erro: null,\r\n            redirect: false\r\n        };\r\n    }\r\n\r\n    exibeErro() {\r\n\r\n        const { erro } = this.state;\r\n\r\n        if (erro) {\r\n            return (\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Erro de conexão com o servidor\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        fetch(`http://localhost:3000/api/spoilers/getone/${id}`)\r\n            .then(data => {\r\n\r\n                data.json().then(data => {\r\n\r\n                    if (data.error) {\r\n\r\n                        this.setState({ erro: data.error });\r\n                    } else {\r\n                        \r\n                        this.setState({ spoiler: data });\r\n                    }\r\n                });\r\n            })\r\n            .catch(erro => this.setState({ erro: erro }));\r\n    }\r\n\r\n    render() {\r\n\r\n        const { redirect } = this.state;\r\n\r\n        if (redirect) {\r\n\r\n            return <Redirect to=\"/\" />;\r\n        }\r\n\r\n        else {\r\n\r\n            return (\r\n                <div className=\"card\">\r\n                    <h5 className=\"card-header\">{this.state.spoiler.titulo}</h5>\r\n                    <div className=\"card-body\">\r\n                        {this.exibeErro()}\r\n                        <p>\r\n                            Tem certeza que deseja remover esse Spoiler? As\r\n                            pessoas podem sentir falta dele :/\r\n                        </p>\r\n                        <blockquote className=\"blockquote text-center\">\r\n                            <p className=\"mb-0\">\r\n                                {this.state.spoiler.descricao}\r\n                            </p>\r\n                            <footer className=\"blockquote-footer\">\r\n                                {this.state.spoiler.espoliador}{' '}\r\n                                <cite title={this.state.spoiler.titulo}>\r\n                                    {this.state.spoiler.titulo}\r\n                                </cite>\r\n                            </footer>\r\n                        </blockquote>\r\n                        <button\r\n                            className=\"btn btn-danger btn-block\"\r\n                            type=\"button\"\r\n                            onClick={this.handleClick}\r\n                        >\r\n                            Remover\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    handleClick = event => {\r\n\r\n        const { id } = this.props.match.params;\r\n        console.log(id)\r\n\r\n        fetch(`http://localhost:3000/api/spoilers/del/${id}`, {\r\n\r\n            method: 'delete'\r\n        })\r\n        .then(data => {\r\n\r\n            if (data.ok) {\r\n\r\n                this.setState({ redirect: true });\r\n            } \r\n            else {\r\n\r\n                data.json().then(data => {\r\n\r\n                    if (data.error) {\r\n\r\n                        this.setState({ erro: data.error });\r\n                    }\r\n                });\r\n            }\r\n        })\r\n        .catch(erro => this.setState({ erro: erro }));\r\n\r\n        event.preventDefault();\r\n    };\r\n}\r\n\r\nexport default ConfirmarRemoverSpoiler;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n    \r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","import React, { useState } from \"react\";\r\nimport ListarSpoiler from \"./components/spoilers/ListarSpoiler\";\r\nimport CriarSpoiler from \"./components/spoilers/CriarSpoiler\";\r\nimport EditarSpoiler from \"./components/spoilers/EditarSpoiler\";\r\nimport ConfirmarRemoverSpoiler from \"./components/spoilers/ConfirmarRemoverSpoiler\";\r\nimport { BrowserRouter, Route, Link} from \"react-router-dom\";\r\nimport {Jumbotron, Button} from 'react-bootstrap'\r\nimport \"./App.css\";\r\n\r\nexport default function App(props){\r\n    const [path, setPath] = useState(\"react-spoiler-app\");\r\n\r\n    return (\r\n      <BrowserRouter>\r\n        <div>\r\n          <Jumbotron fluid>\r\n            <div className=\"container\">\r\n              <Link to={`/${path}/`}>\r\n                <h1 className=\"display-4\">#spoilers</h1>\r\n              </Link>\r\n              <p className=\"lead\">\r\n                Não se preocupe, tudo aqui é brincadeira. Ou não :)\r\n              </p>\r\n              <Button variant=\"danger\">Criar</Button>\r\n              {/* <Link to={`/${path}/criar`} className=\"btn btn-primary\">\r\n                Criar\r\n              </Link> */}\r\n            </div>\r\n          </Jumbotron>\r\n          <div className=\"container\">\r\n            <div className=\"row justify-content-md-center\">\r\n              <main className=\"col-10\" role=\"main\">\r\n                {/* <Route path=\"/react-spoiler-app/\" component={ListarSpoiler} /> */}\r\n                <Route path={`/${path}/`} exact component={ListarSpoiler} />\r\n                <Route path={`/${path}/criar/`} component={CriarSpoiler} />\r\n                <Route path={`/${path}/editar/:id`} component={EditarSpoiler} />\r\n                <Route path={`/${path}/remover/:id`} component={ConfirmarRemoverSpoiler}/>\r\n              </main>\r\n            </div>\r\n          </div>\r\n\r\n            <div className=\"container mt-5 mb-0\">\r\n              <p className=\"lead\">\r\n               endpage\r\n              </p>\r\n            </div>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n}"],"sourceRoot":""}